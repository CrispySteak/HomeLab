apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
    name: prowlarr
    namespace: prowlarr
spec:
    interval: 15m
    chart:
        spec:
            chart: prowlarr
            version: 18.11.3
            sourceRef:
                kind: HelmRepository
                name: truecharts
                namespace: flux-system
    releaseName: prowlarr
    values:
        TZ: "${TZ}"
        addons:
            codeserver:
                enabled: false
            netshoot:
                enabled: false
            vpn:
                configFile: ""
                env:
                    VPN_ENDPOINT_IP:
                        name: VPN_ENDPOINT_IP
                        value: "${PROWLARR_VPN_ENDPOINT_IP}"
                    VPN_ENDPOINT_PORT:
                        name: VPN_ENDPOINT_PORT
                        value: "${PROWLARR_VPN_ENDPOINT_PORT}"
                    VPN_SERVICE_PROVIDER:
                        name: VPN_SERVICE_PROVIDER
                        value: custom
                    VPN_TYPE:
                        name: VPN_TYPE
                        value: wireguard
                    WIREGUARD_ADDRESSES:
                        name: WIREGUARD_ADDRESSES
                        value: 10.2.0.2/32
                    WIREGUARD_PRIVATE_KEY:
                        name: WIREGUARD_PRIVATE_KEY
                        value: QK9rv+xt9I4bUayizprMuq+ThQU+exNTEH7CdBzVTmA=
                    WIREGUARD_PUBLIC_KEY:
                        name: WIREGUARD_PUBLIC_KEY
                        value: "${PROWLARR_WIREGUARD_PUBLIC_KEY}"
                excludedNetworks_IPv4:
                    - 172.16.0.0/16
                    - 192.168.1.0/24
                killSwitch: true
                type: gluetun
        configmap:
            dashboard:
                data:
                    prowlarr.json: '{{ .Files.Get "dashboard.json" | indent 8 }}'
                enabled: true
                labels:
                    grafana_dashboard: "1"
        credentials:
            backblaze:
                accessKey: "${S3ID}"
                bucket: "${S3PREFIX}"
                encrKey: "${S3ENCR}"
                name: backblaze
                path: ""
                secretKey: "${S3KEY}"
                type: s3
                url: "${S3url}"
        exportarrImage:
            pullPolicy: IfNotPresent
            repository: ghcr.io/onedr0p/exportarr
            tag: v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
        ingress:
            main:
                enabled: true
                hosts:
                    - host: "prowlarr.${DOMAIN_0}"
                      paths:
                        - path: /
                          pathType: Prefix
                ingressClassName: ""
                integrations:
                    certManager:
                        certificateIssuer: domain
                        enabled: true
                    homepage:
                        description: ""
                        enabled: true
                        group: Arr
                        icon: ""
                        name: ""
                        widget:
                            custom:
                                key: "${HOMEPAGE_PROWLARR_API_KEY}"
                            customkv:
                                - key: fields
                                  value: '["numberOfGrabs", "numberOfQueries", "numberOfFailGrabs", "numberOfFailQueries"]'
                            enabled: true
                    traefik:
                        allowCors: false
                        enabled: true
                        entrypoints:
                            - websecure
                        middlewares:
                            - name: ipwhitelist
                              namespace: ""
        metrics:
            main:
                enabled: false
                endpoints:
                    - path: /metrics
                      port: metrics
                prometheusRule:
                    enabled: false
                targetSelector: metrics
                type: servicemonitor
        persistence:
            config:
                enabled: true
                readOnly: false
                storageClass: ""
                targetSelector:
                    exportarr:
                        exportarr:
                            mountPath: /config
                            readOnly: true
                    main:
                        main:
                            mountPath: /config
                volsync:
                    - credentials: backblaze
                      dest:
                        enabled: false
                      name: config
                      src:
                        enabled: true
                      type: restic
        release_name: prowlarr
        resources: {}
        securityContext:
            container:
                UMASK: "0022"
                readOnlyRootFilesystem: false
                runAsGroup: 568
                runAsUser: 568
            pod:
                fsGroupChangePolicy: OnRootMismatch
        service:
            main:
                enabled: true
                loadBalancerIP: ""
                ports:
                    main:
                        port: 9696
                type: LoadBalancer
            metrics:
                enabled: true
                ports:
                    metrics:
                        enabled: true
                        port: 9697
                        targetSelector: exportarr
                targetSelector: exportarr
                type: ClusterIP
        updated: true
        workload:
            exportarr:
                enabled: true
                podSpec:
                    containers:
                        exportarr:
                            args:
                                - prowlarr
                            enabled: true
                            env:
                                CONFIG: /config/config.xml
                                INTERFACE: 0.0.0.0
                                PORT: '{{ .Values.service.metrics.ports.metrics.port }}'
                                URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
                            imageSelector: exportarrImage
                            primary: true
                            probes:
                                liveness:
                                    enabled: true
                                    path: /healthz
                                    port: '{{ .Values.service.metrics.ports.metrics.port }}'
                                    type: http
                                readiness:
                                    enabled: true
                                    path: /healthz
                                    port: '{{ .Values.service.metrics.ports.metrics.port }}'
                                    type: http
                                startup:
                                    enabled: true
                                    path: /healthz
                                    port: '{{ .Values.service.metrics.ports.metrics.port }}'
                                    type: http
                replicas: 1
                strategy: RollingUpdate
                type: Deployment
            main:
                podSpec:
                    containers:
                        main:
                            env:
                                PROWLARR__AUTHENTICATION_METHOD: ""
                                PROWLARR__PORT: '{{ .Values.service.main.ports.main.port }}'
                            probes:
                                liveness:
                                    path: /ping
                                readiness:
                                    path: /ping
                                startup:
                                    type: tcp
                replicas: 1
                type: Deployment
